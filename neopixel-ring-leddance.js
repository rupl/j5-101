var pixel = require("node-pixel");
var five = require("johnny-five");

var board = new five.Board();
var strip = null;
var colorShift = 0;

board.on("ready", function() {
  console.log("board.ready");

  var led = new five.Led(10);
  led.brightness(48);

  //
  // LED Dance
  //
  // Color shifting can be distracting in this mode. Using the permanence
  // of color lets the eye focus on movement. Using solid colors is also nice.
  //
  // Set `fps` to theoretical max because we want the cycle to go continuously
  // and the drawing itself produces enough delay for one frame.
  //

  var shift = 4; // how fast the colors rotate, 0-255
  var fps = 60; // how often to refresh per second, ~60 is max

  strip = new pixel.Strip({
    board: this,
    controller: "FIRMATA",
    strips: [ {pin: 6, length: 12}, ],
    gamma: 3.6, // 3.6 = night, 2.6 = bright day
  });

  strip.on("ready", function() {
    console.log(">>> strip.ready — " + strip.length + " LEDs");
    loop(fps);
  });

  // Patterns are defined in rows of arrays. If the length of any row array is
  // longer than strip.length, the excess is ignored automatically.

  var patterns = [
    // fast wipe
    [
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,1,0,0,0,0,0,0,0,0,1,1],
      [1,1,1,0,0,0,0,0,0,1,1,1],
      [1,1,1,1,0,0,0,0,1,1,1,1],
      [1,1,1,1,1,0,0,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [0,1,1,1,1,1,1,1,1,1,1,0],
      [0,0,1,1,1,1,1,1,1,1,0,0],
      [0,0,0,1,1,1,1,1,1,0,0,0],
      [0,0,0,0,1,1,1,1,0,0,0,0],
      [0,0,0,0,0,1,1,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,0,0,0,0,0],
      [0,0,0,0,1,1,1,1,0,0,0,0],
      [0,0,0,1,1,1,1,1,1,0,0,0],
      [0,0,1,1,1,1,1,1,1,1,0,0],
      [0,1,1,1,1,1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,0,0,1,1,1,1,1],
      [1,1,1,1,0,0,0,0,1,1,1,1],
      [1,1,1,0,0,0,0,0,0,1,1,1],
      [1,1,0,0,0,0,0,0,0,0,1,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
    ],

    // slow wipe
    [
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,1,0,0,0,0,0,0,0,0,1,1],
      [1,1,0,0,0,0,0,0,0,0,1,1],
      [1,1,1,0,0,0,0,0,0,1,1,1],
      [1,1,1,0,0,0,0,0,0,1,1,1],
      [1,1,1,1,0,0,0,0,1,1,1,1],
      [1,1,1,1,0,0,0,0,1,1,1,1],
      [1,1,1,1,1,0,0,1,1,1,1,1],
      [1,1,1,1,1,0,0,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [0,1,1,1,1,1,1,1,1,1,1,0],
      [0,1,1,1,1,1,1,1,1,1,1,0],
      [0,0,1,1,1,1,1,1,1,1,0,0],
      [0,0,1,1,1,1,1,1,1,1,0,0],
      [0,0,0,1,1,1,1,1,1,0,0,0],
      [0,0,0,1,1,1,1,1,1,0,0,0],
      [0,0,0,0,1,1,1,1,0,0,0,0],
      [0,0,0,0,1,1,1,1,0,0,0,0],
      [0,0,0,0,0,1,1,0,0,0,0,0],
      [0,0,0,0,0,1,1,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,1,0,0,0,0,0],
      [0,0,0,0,0,1,1,0,0,0,0,0],
      [0,0,0,0,1,1,1,1,0,0,0,0],
      [0,0,0,0,1,1,1,1,0,0,0,0],
      [0,0,0,1,1,1,1,1,1,0,0,0],
      [0,0,0,1,1,1,1,1,1,0,0,0],
      [0,0,1,1,1,1,1,1,1,1,0,0],
      [0,0,1,1,1,1,1,1,1,1,0,0],
      [0,1,1,1,1,1,1,1,1,1,1,0],
      [0,1,1,1,1,1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,0,0,1,1,1,1,1],
      [1,1,1,1,1,0,0,1,1,1,1,1],
      [1,1,1,1,0,0,0,0,1,1,1,1],
      [1,1,1,1,0,0,0,0,1,1,1,1],
      [1,1,1,0,0,0,0,0,0,1,1,1],
      [1,1,1,0,0,0,0,0,0,1,1,1],
      [1,1,0,0,0,0,0,0,0,0,1,1],
      [1,1,0,0,0,0,0,0,0,0,1,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,1],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
    ],

    // four quarters circling
    [
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [1,0,0,1,0,0,1,0,0,1,0,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,1,0,0,1,0,0,1,0,0,1,0],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,1,0,0,1,0,0,1,0,0,1],
      [0,0,0,0,0,0,0,0,0,0,0,0],
    ],

    // single pixel clockwise 3x
    [
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [0,1,0,0,0,0,0,0,0,0,0,0],
      [0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,1,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,0],
      [0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,0,0,0,0,0,0,1,0,0],
      [0,0,0,0,0,0,0,0,0,0,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [0,1,0,0,0,0,0,0,0,0,0,0],
      [0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,1,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,0],
      [0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,0,0,0,0,0,0,1,0,0],
      [0,0,0,0,0,0,0,0,0,0,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,1],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [0,1,0,0,0,0,0,0,0,0,0,0],
      [0,0,1,0,0,0,0,0,0,0,0,0],
      [0,0,0,1,0,0,0,0,0,0,0,0],
      [0,0,0,0,1,0,0,0,0,0,0,0],
      [0,0,0,0,0,1,0,0,0,0,0,0],
      [0,0,0,0,0,0,1,0,0,0,0,0],
      [0,0,0,0,0,0,0,1,0,0,0,0],
      [0,0,0,0,0,0,0,0,1,0,0,0],
      [0,0,0,0,0,0,0,0,0,1,0,0],
      [0,0,0,0,0,0,0,0,0,0,1,0],
      [0,0,0,0,0,0,0,0,0,0,0,1],
      [0,0,0,0,0,0,0,0,0,0,0,0],
    ],

    // fill pixel bounce
    [
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [1,1,0,0,0,0,0,0,0,0,0,0],
      [1,1,0,0,0,0,0,0,0,0,0,0],
      [1,1,1,0,0,0,0,0,0,0,0,0],
      [1,1,1,0,0,0,0,0,0,0,0,0],
      [1,1,1,1,0,0,0,0,0,0,0,0],
      [1,1,1,1,0,0,0,0,0,0,0,0],
      [1,1,1,1,1,0,0,0,0,0,0,0],
      [1,1,1,1,1,0,0,0,0,0,0,0],
      [1,1,1,1,1,1,0,0,0,0,0,0],
      [1,1,1,1,1,1,0,0,0,0,0,0],
      [1,1,1,1,1,1,1,0,0,0,0,0],
      [1,1,1,1,1,1,1,0,0,0,0,0],
      [1,1,1,1,1,1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1,1,1,0,0,0],
      [1,1,1,1,1,1,1,1,1,0,0,0],
      [1,1,1,1,1,1,1,1,1,1,0,0],
      [1,1,1,1,1,1,1,1,1,1,0,0],
      [1,1,1,1,1,1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,1],
      [1,1,1,1,1,1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1,1,1,1,1,0],
      [1,1,1,1,1,1,1,1,1,1,0,0],
      [1,1,1,1,1,1,1,1,1,1,0,0],
      [1,1,1,1,1,1,1,1,1,0,0,0],
      [1,1,1,1,1,1,1,1,1,0,0,0],
      [1,1,1,1,1,1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1,1,0,0,0,0],
      [1,1,1,1,1,1,1,0,0,0,0,0],
      [1,1,1,1,1,1,1,0,0,0,0,0],
      [1,1,1,1,1,1,0,0,0,0,0,0],
      [1,1,1,1,1,1,0,0,0,0,0,0],
      [1,1,1,1,1,0,0,0,0,0,0,0],
      [1,1,1,1,1,0,0,0,0,0,0,0],
      [1,1,1,1,0,0,0,0,0,0,0,0],
      [1,1,1,1,0,0,0,0,0,0,0,0],
      [1,1,1,0,0,0,0,0,0,0,0,0],
      [1,1,1,0,0,0,0,0,0,0,0,0],
      [1,1,0,0,0,0,0,0,0,0,0,0],
      [1,1,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [1,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
      [0,0,0,0,0,0,0,0,0,0,0,0],
    ]
  ];

  function loop(framerate) {
    var loop = setInterval(function() {
      // cycle through all patterns
      for (var currentPattern = 0; currentPattern < patterns.length; currentPattern++) {
        for (var row = 0; row < patterns[currentPattern].length; row++) {
          for (var col = 0; col < strip.length; col++) {
            // draw new pixel. 1 = draw, 0 = off
            if (patterns[currentPattern][row][col]) {
              strip.pixel(col).color(colorWheel(col * (255/strip.length) + Math.round(colorShift)));
            } else {
              strip.pixel(col).off();
            }

            // update strip
            strip.show();
          }

          // shift colors
          colorShift += shift;
        }
      }
    }, 1000 / framerate);
  }

  // Input any value number greater than 0 to get a color value.
  // The number is the absolute value of modulus of 255, and the
  // colors progressively transition in a cycle: r => g => b => r
  function colorWheel( WheelPos ){
    var r,g,b;
    WheelPos = (0 > WheelPos) ? -WheelPos : WheelPos;
    WheelPos = 255 - (WheelPos % 255);

    if ( WheelPos < 85 ) {
      r = 255 - WheelPos * 3;
      g = 0;
      b = WheelPos * 3;
    } else if (WheelPos < 170) {
      WheelPos -= 85;
      r = 0;
      g = WheelPos * 3;
      b = 255 - WheelPos * 3;
    } else {
      WheelPos -= 170;
      r = WheelPos * 3;
      g = 255 - WheelPos * 3;
      b = 0;
    }

    // tone it down
    r = Math.floor(r/2);
    g = Math.floor(g/2);
    b = Math.floor(b/2);

    // returns a string with the rgb value to be used as the parameter
    return "rgb(" + r +"," + g + "," + b + ")";
  }

  // go nuts!
  this.repl.inject({
    strip: strip,
    led: led
  });

  // cleanup when this program is terminated
  this.on("exit", function() {
    led.off();
    strip.off(); // doesn't work, not sure why
  });
});
